/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dbsystem.cotizatuvehiculo.model.impl;

import com.dbsystem.cotizatuvehiculo.model.Cliente;
import com.dbsystem.cotizatuvehiculo.model.ClienteModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Cliente service. Represents a row in the &quot;dbsystem_Cliente&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ClienteModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ClienteImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ClienteImpl
 * @generated
 */
@ProviderType
public class ClienteModelImpl
	extends BaseModelImpl<Cliente> implements ClienteModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cliente model instance should use the <code>Cliente</code> interface instead.
	 */
	public static final String TABLE_NAME = "dbsystem_Cliente";

	public static final Object[][] TABLE_COLUMNS = {
		{"clienteId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"tipoDocumento", Types.BIGINT}, {"numeroDocumento", Types.VARCHAR},
		{"nombres", Types.VARCHAR}, {"apellidos", Types.VARCHAR},
		{"celular", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"estado", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("clienteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tipoDocumento", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("numeroDocumento", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nombres", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("apellidos", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("celular", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estado", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dbsystem_Cliente (clienteId LONG not null primary key,groupId LONG,tipoDocumento LONG,numeroDocumento VARCHAR(75) null,nombres VARCHAR(75) null,apellidos VARCHAR(75) null,celular VARCHAR(75) null,email VARCHAR(75) null,estado BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table dbsystem_Cliente";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cliente.clienteId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dbsystem_Cliente.clienteId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long NUMERODOCUMENTO_COLUMN_BITMASK = 1L;

	public static final long TIPODOCUMENTO_COLUMN_BITMASK = 2L;

	public static final long CLIENTEID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ClienteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clienteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClienteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clienteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Cliente.class;
	}

	@Override
	public String getModelClassName() {
		return Cliente.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Cliente, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cliente, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Cliente)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Cliente, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Cliente, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Cliente)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Cliente, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Cliente, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Cliente, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Cliente, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Cliente, Object>>();
		Map<String, BiConsumer<Cliente, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Cliente, ?>>();

		attributeGetterFunctions.put("clienteId", Cliente::getClienteId);
		attributeSetterBiConsumers.put(
			"clienteId", (BiConsumer<Cliente, Long>)Cliente::setClienteId);
		attributeGetterFunctions.put("groupId", Cliente::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Cliente, Long>)Cliente::setGroupId);
		attributeGetterFunctions.put(
			"tipoDocumento", Cliente::getTipoDocumento);
		attributeSetterBiConsumers.put(
			"tipoDocumento",
			(BiConsumer<Cliente, Long>)Cliente::setTipoDocumento);
		attributeGetterFunctions.put(
			"numeroDocumento", Cliente::getNumeroDocumento);
		attributeSetterBiConsumers.put(
			"numeroDocumento",
			(BiConsumer<Cliente, String>)Cliente::setNumeroDocumento);
		attributeGetterFunctions.put("nombres", Cliente::getNombres);
		attributeSetterBiConsumers.put(
			"nombres", (BiConsumer<Cliente, String>)Cliente::setNombres);
		attributeGetterFunctions.put("apellidos", Cliente::getApellidos);
		attributeSetterBiConsumers.put(
			"apellidos", (BiConsumer<Cliente, String>)Cliente::setApellidos);
		attributeGetterFunctions.put("celular", Cliente::getCelular);
		attributeSetterBiConsumers.put(
			"celular", (BiConsumer<Cliente, String>)Cliente::setCelular);
		attributeGetterFunctions.put("email", Cliente::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Cliente, String>)Cliente::setEmail);
		attributeGetterFunctions.put("estado", Cliente::getEstado);
		attributeSetterBiConsumers.put(
			"estado", (BiConsumer<Cliente, Boolean>)Cliente::setEstado);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getClienteId() {
		return _clienteId;
	}

	@Override
	public void setClienteId(long clienteId) {
		_columnBitmask = -1L;

		_clienteId = clienteId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getTipoDocumento() {
		return _tipoDocumento;
	}

	@Override
	public void setTipoDocumento(long tipoDocumento) {
		_columnBitmask |= TIPODOCUMENTO_COLUMN_BITMASK;

		if (!_setOriginalTipoDocumento) {
			_setOriginalTipoDocumento = true;

			_originalTipoDocumento = _tipoDocumento;
		}

		_tipoDocumento = tipoDocumento;
	}

	public long getOriginalTipoDocumento() {
		return _originalTipoDocumento;
	}

	@Override
	public String getNumeroDocumento() {
		if (_numeroDocumento == null) {
			return "";
		}
		else {
			return _numeroDocumento;
		}
	}

	@Override
	public void setNumeroDocumento(String numeroDocumento) {
		_columnBitmask |= NUMERODOCUMENTO_COLUMN_BITMASK;

		if (_originalNumeroDocumento == null) {
			_originalNumeroDocumento = _numeroDocumento;
		}

		_numeroDocumento = numeroDocumento;
	}

	public String getOriginalNumeroDocumento() {
		return GetterUtil.getString(_originalNumeroDocumento);
	}

	@Override
	public String getNombres() {
		if (_nombres == null) {
			return "";
		}
		else {
			return _nombres;
		}
	}

	@Override
	public void setNombres(String nombres) {
		_nombres = nombres;
	}

	@Override
	public String getApellidos() {
		if (_apellidos == null) {
			return "";
		}
		else {
			return _apellidos;
		}
	}

	@Override
	public void setApellidos(String apellidos) {
		_apellidos = apellidos;
	}

	@Override
	public String getCelular() {
		if (_celular == null) {
			return "";
		}
		else {
			return _celular;
		}
	}

	@Override
	public void setCelular(String celular) {
		_celular = celular;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public boolean getEstado() {
		return _estado;
	}

	@Override
	public boolean isEstado() {
		return _estado;
	}

	@Override
	public void setEstado(boolean estado) {
		_estado = estado;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Cliente.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Cliente toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Cliente)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ClienteImpl clienteImpl = new ClienteImpl();

		clienteImpl.setClienteId(getClienteId());
		clienteImpl.setGroupId(getGroupId());
		clienteImpl.setTipoDocumento(getTipoDocumento());
		clienteImpl.setNumeroDocumento(getNumeroDocumento());
		clienteImpl.setNombres(getNombres());
		clienteImpl.setApellidos(getApellidos());
		clienteImpl.setCelular(getCelular());
		clienteImpl.setEmail(getEmail());
		clienteImpl.setEstado(isEstado());

		clienteImpl.resetOriginalValues();

		return clienteImpl;
	}

	@Override
	public int compareTo(Cliente cliente) {
		int value = 0;

		if (getClienteId() < cliente.getClienteId()) {
			value = -1;
		}
		else if (getClienteId() > cliente.getClienteId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Cliente)) {
			return false;
		}

		Cliente cliente = (Cliente)obj;

		long primaryKey = cliente.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ClienteModelImpl clienteModelImpl = this;

		clienteModelImpl._originalTipoDocumento =
			clienteModelImpl._tipoDocumento;

		clienteModelImpl._setOriginalTipoDocumento = false;

		clienteModelImpl._originalNumeroDocumento =
			clienteModelImpl._numeroDocumento;

		clienteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Cliente> toCacheModel() {
		ClienteCacheModel clienteCacheModel = new ClienteCacheModel();

		clienteCacheModel.clienteId = getClienteId();

		clienteCacheModel.groupId = getGroupId();

		clienteCacheModel.tipoDocumento = getTipoDocumento();

		clienteCacheModel.numeroDocumento = getNumeroDocumento();

		String numeroDocumento = clienteCacheModel.numeroDocumento;

		if ((numeroDocumento != null) && (numeroDocumento.length() == 0)) {
			clienteCacheModel.numeroDocumento = null;
		}

		clienteCacheModel.nombres = getNombres();

		String nombres = clienteCacheModel.nombres;

		if ((nombres != null) && (nombres.length() == 0)) {
			clienteCacheModel.nombres = null;
		}

		clienteCacheModel.apellidos = getApellidos();

		String apellidos = clienteCacheModel.apellidos;

		if ((apellidos != null) && (apellidos.length() == 0)) {
			clienteCacheModel.apellidos = null;
		}

		clienteCacheModel.celular = getCelular();

		String celular = clienteCacheModel.celular;

		if ((celular != null) && (celular.length() == 0)) {
			clienteCacheModel.celular = null;
		}

		clienteCacheModel.email = getEmail();

		String email = clienteCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			clienteCacheModel.email = null;
		}

		clienteCacheModel.estado = isEstado();

		return clienteCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Cliente, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cliente, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Cliente)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Cliente, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Cliente, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Cliente, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Cliente)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Cliente.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Cliente.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _clienteId;
	private long _groupId;
	private long _tipoDocumento;
	private long _originalTipoDocumento;
	private boolean _setOriginalTipoDocumento;
	private String _numeroDocumento;
	private String _originalNumeroDocumento;
	private String _nombres;
	private String _apellidos;
	private String _celular;
	private String _email;
	private boolean _estado;
	private long _columnBitmask;
	private Cliente _escapedModel;

}