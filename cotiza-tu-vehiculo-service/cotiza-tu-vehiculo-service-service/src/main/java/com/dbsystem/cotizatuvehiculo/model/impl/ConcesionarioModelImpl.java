/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dbsystem.cotizatuvehiculo.model.impl;

import com.dbsystem.cotizatuvehiculo.model.Concesionario;
import com.dbsystem.cotizatuvehiculo.model.ConcesionarioModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Concesionario service. Represents a row in the &quot;dbsystem_Concesionario&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ConcesionarioModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConcesionarioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConcesionarioImpl
 * @generated
 */
@ProviderType
public class ConcesionarioModelImpl
	extends BaseModelImpl<Concesionario> implements ConcesionarioModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a concesionario model instance should use the <code>Concesionario</code> interface instead.
	 */
	public static final String TABLE_NAME = "dbsystem_Concesionario";

	public static final Object[][] TABLE_COLUMNS = {
		{"concesionarioId", Types.BIGINT}, {"ciudadId", Types.BIGINT},
		{"concesionario", Types.VARCHAR}, {"estado", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("concesionarioId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ciudadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("concesionario", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estado", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dbsystem_Concesionario (concesionarioId LONG not null primary key,ciudadId LONG,concesionario VARCHAR(75) null,estado BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table dbsystem_Concesionario";

	public static final String ORDER_BY_JPQL =
		" ORDER BY concesionario.concesionarioId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dbsystem_Concesionario.concesionarioId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CIUDADID_COLUMN_BITMASK = 1L;

	public static final long ESTADO_COLUMN_BITMASK = 2L;

	public static final long CONCESIONARIOID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ConcesionarioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _concesionarioId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConcesionarioId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _concesionarioId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Concesionario.class;
	}

	@Override
	public String getModelClassName() {
		return Concesionario.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Concesionario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Concesionario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Concesionario, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Concesionario)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Concesionario, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Concesionario, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Concesionario)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Concesionario, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Concesionario, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Concesionario, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Concesionario, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Concesionario, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Concesionario, Object>>();
		Map<String, BiConsumer<Concesionario, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Concesionario, ?>>();

		attributeGetterFunctions.put(
			"concesionarioId", Concesionario::getConcesionarioId);
		attributeSetterBiConsumers.put(
			"concesionarioId",
			(BiConsumer<Concesionario, Long>)Concesionario::setConcesionarioId);
		attributeGetterFunctions.put("ciudadId", Concesionario::getCiudadId);
		attributeSetterBiConsumers.put(
			"ciudadId",
			(BiConsumer<Concesionario, Long>)Concesionario::setCiudadId);
		attributeGetterFunctions.put(
			"concesionario", Concesionario::getConcesionario);
		attributeSetterBiConsumers.put(
			"concesionario",
			(BiConsumer<Concesionario, String>)Concesionario::setConcesionario);
		attributeGetterFunctions.put("estado", Concesionario::getEstado);
		attributeSetterBiConsumers.put(
			"estado",
			(BiConsumer<Concesionario, Boolean>)Concesionario::setEstado);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getConcesionarioId() {
		return _concesionarioId;
	}

	@Override
	public void setConcesionarioId(long concesionarioId) {
		_concesionarioId = concesionarioId;
	}

	@Override
	public long getCiudadId() {
		return _ciudadId;
	}

	@Override
	public void setCiudadId(long ciudadId) {
		_columnBitmask |= CIUDADID_COLUMN_BITMASK;

		if (!_setOriginalCiudadId) {
			_setOriginalCiudadId = true;

			_originalCiudadId = _ciudadId;
		}

		_ciudadId = ciudadId;
	}

	public long getOriginalCiudadId() {
		return _originalCiudadId;
	}

	@Override
	public String getConcesionario() {
		if (_concesionario == null) {
			return "";
		}
		else {
			return _concesionario;
		}
	}

	@Override
	public void setConcesionario(String concesionario) {
		_concesionario = concesionario;
	}

	@Override
	public boolean getEstado() {
		return _estado;
	}

	@Override
	public boolean isEstado() {
		return _estado;
	}

	@Override
	public void setEstado(boolean estado) {
		_columnBitmask |= ESTADO_COLUMN_BITMASK;

		if (!_setOriginalEstado) {
			_setOriginalEstado = true;

			_originalEstado = _estado;
		}

		_estado = estado;
	}

	public boolean getOriginalEstado() {
		return _originalEstado;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Concesionario.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Concesionario toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Concesionario)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConcesionarioImpl concesionarioImpl = new ConcesionarioImpl();

		concesionarioImpl.setConcesionarioId(getConcesionarioId());
		concesionarioImpl.setCiudadId(getCiudadId());
		concesionarioImpl.setConcesionario(getConcesionario());
		concesionarioImpl.setEstado(isEstado());

		concesionarioImpl.resetOriginalValues();

		return concesionarioImpl;
	}

	@Override
	public int compareTo(Concesionario concesionario) {
		long primaryKey = concesionario.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Concesionario)) {
			return false;
		}

		Concesionario concesionario = (Concesionario)obj;

		long primaryKey = concesionario.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ConcesionarioModelImpl concesionarioModelImpl = this;

		concesionarioModelImpl._originalCiudadId =
			concesionarioModelImpl._ciudadId;

		concesionarioModelImpl._setOriginalCiudadId = false;

		concesionarioModelImpl._originalEstado = concesionarioModelImpl._estado;

		concesionarioModelImpl._setOriginalEstado = false;

		concesionarioModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Concesionario> toCacheModel() {
		ConcesionarioCacheModel concesionarioCacheModel =
			new ConcesionarioCacheModel();

		concesionarioCacheModel.concesionarioId = getConcesionarioId();

		concesionarioCacheModel.ciudadId = getCiudadId();

		concesionarioCacheModel.concesionario = getConcesionario();

		String concesionario = concesionarioCacheModel.concesionario;

		if ((concesionario != null) && (concesionario.length() == 0)) {
			concesionarioCacheModel.concesionario = null;
		}

		concesionarioCacheModel.estado = isEstado();

		return concesionarioCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Concesionario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Concesionario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Concesionario, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Concesionario)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Concesionario, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Concesionario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Concesionario, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Concesionario)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Concesionario.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Concesionario.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _concesionarioId;
	private long _ciudadId;
	private long _originalCiudadId;
	private boolean _setOriginalCiudadId;
	private String _concesionario;
	private boolean _estado;
	private boolean _originalEstado;
	private boolean _setOriginalEstado;
	private long _columnBitmask;
	private Concesionario _escapedModel;

}