/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dbsystem.cotizatuvehiculo.model.impl;

import com.dbsystem.cotizatuvehiculo.model.Ciudades;
import com.dbsystem.cotizatuvehiculo.model.CiudadesModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Ciudades service. Represents a row in the &quot;dbsystem_Ciudades&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CiudadesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CiudadesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CiudadesImpl
 * @generated
 */
@ProviderType
public class CiudadesModelImpl
	extends BaseModelImpl<Ciudades> implements CiudadesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ciudades model instance should use the <code>Ciudades</code> interface instead.
	 */
	public static final String TABLE_NAME = "dbsystem_Ciudades";

	public static final Object[][] TABLE_COLUMNS = {
		{"ciudadId", Types.BIGINT}, {"ciudad", Types.VARCHAR},
		{"estado", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("ciudadId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ciudad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estado", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table dbsystem_Ciudades (ciudadId LONG not null primary key,ciudad VARCHAR(75) null,estado BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table dbsystem_Ciudades";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ciudades.ciudadId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY dbsystem_Ciudades.ciudadId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ESTADO_COLUMN_BITMASK = 1L;

	public static final long CIUDADID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public CiudadesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ciudadId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCiudadId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ciudadId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Ciudades.class;
	}

	@Override
	public String getModelClassName() {
		return Ciudades.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Ciudades, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Ciudades, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ciudades, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Ciudades)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Ciudades, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Ciudades, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Ciudades)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Ciudades, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Ciudades, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Ciudades, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Ciudades, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Ciudades, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Ciudades, Object>>();
		Map<String, BiConsumer<Ciudades, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Ciudades, ?>>();

		attributeGetterFunctions.put("ciudadId", Ciudades::getCiudadId);
		attributeSetterBiConsumers.put(
			"ciudadId", (BiConsumer<Ciudades, Long>)Ciudades::setCiudadId);
		attributeGetterFunctions.put("ciudad", Ciudades::getCiudad);
		attributeSetterBiConsumers.put(
			"ciudad", (BiConsumer<Ciudades, String>)Ciudades::setCiudad);
		attributeGetterFunctions.put("estado", Ciudades::getEstado);
		attributeSetterBiConsumers.put(
			"estado", (BiConsumer<Ciudades, Boolean>)Ciudades::setEstado);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getCiudadId() {
		return _ciudadId;
	}

	@Override
	public void setCiudadId(long ciudadId) {
		_ciudadId = ciudadId;
	}

	@Override
	public String getCiudad() {
		if (_ciudad == null) {
			return "";
		}
		else {
			return _ciudad;
		}
	}

	@Override
	public void setCiudad(String ciudad) {
		_ciudad = ciudad;
	}

	@Override
	public boolean getEstado() {
		return _estado;
	}

	@Override
	public boolean isEstado() {
		return _estado;
	}

	@Override
	public void setEstado(boolean estado) {
		_columnBitmask |= ESTADO_COLUMN_BITMASK;

		if (!_setOriginalEstado) {
			_setOriginalEstado = true;

			_originalEstado = _estado;
		}

		_estado = estado;
	}

	public boolean getOriginalEstado() {
		return _originalEstado;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Ciudades.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Ciudades toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Ciudades)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CiudadesImpl ciudadesImpl = new CiudadesImpl();

		ciudadesImpl.setCiudadId(getCiudadId());
		ciudadesImpl.setCiudad(getCiudad());
		ciudadesImpl.setEstado(isEstado());

		ciudadesImpl.resetOriginalValues();

		return ciudadesImpl;
	}

	@Override
	public int compareTo(Ciudades ciudades) {
		long primaryKey = ciudades.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Ciudades)) {
			return false;
		}

		Ciudades ciudades = (Ciudades)obj;

		long primaryKey = ciudades.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CiudadesModelImpl ciudadesModelImpl = this;

		ciudadesModelImpl._originalEstado = ciudadesModelImpl._estado;

		ciudadesModelImpl._setOriginalEstado = false;

		ciudadesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Ciudades> toCacheModel() {
		CiudadesCacheModel ciudadesCacheModel = new CiudadesCacheModel();

		ciudadesCacheModel.ciudadId = getCiudadId();

		ciudadesCacheModel.ciudad = getCiudad();

		String ciudad = ciudadesCacheModel.ciudad;

		if ((ciudad != null) && (ciudad.length() == 0)) {
			ciudadesCacheModel.ciudad = null;
		}

		ciudadesCacheModel.estado = isEstado();

		return ciudadesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Ciudades, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Ciudades, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ciudades, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Ciudades)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Ciudades, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Ciudades, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Ciudades, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Ciudades)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		Ciudades.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		Ciudades.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _ciudadId;
	private String _ciudad;
	private boolean _estado;
	private boolean _originalEstado;
	private boolean _setOriginalEstado;
	private long _columnBitmask;
	private Ciudades _escapedModel;

}